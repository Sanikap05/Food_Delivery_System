/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.DeliveryMan.DeliveryManDirectory;
import Business.Order.Order;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.SystemAdminWorkAreaJPanel;

/**
 *
 * @author Sanik
 */
public class ManageOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrdersJPanel
     */
    JPanel userProcessContainer;
    Restaurant restaurant;
    UserAccount userAccount;
    Order order;
    DeliveryManDirectory deliveryManDirectory;
    public ManageOrdersJPanel(JPanel userProcessContainer, Restaurant restaurant, DeliveryManDirectory deliveryManDirectory, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.restaurant = restaurant;
        this.deliveryManDirectory = deliveryManDirectory;
        this.userAccount = userAccount;
        btnAssign.setEnabled(false);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateTable()
    {
        if(this.restaurant.getWorkQueue().getWorkRequestList() != null)
        {
            DefaultTableModel dtm = (DefaultTableModel) restaurantOrdersTable.getModel();
            dtm.setRowCount(0);
            for (WorkRequest w : this.restaurant.getWorkQueue().getWorkRequestList()) 
            {
                if(w.getOrder() != null)
                {
                    Object row[] = new Object[7];
                    row[0] = w.getOrder().getOrderId();
                    Iterator itr = w.getOrder().getOrderMap().entrySet().iterator();
                    StringBuilder sb = new StringBuilder("");
                    while (itr.hasNext()) 
                    { 
                        Map.Entry mapElement = (Map.Entry)itr.next(); 
                        sb.append(mapElement.getKey()+", ");
                    } 
                   
                    row[1]= sb;
                    //System.out.println(w.getReceiver().getCustomer().getName());
                    row[2] = w.getReceiver().getCustomer().getName();
                    row[3] = w.getOrder().getComment();
                    if(w.getSender().getCustomer() == null)
                    {
                    row[4] = this.restaurant.getName();
                    }
                    else
                    {
                    row[4] = w.getSender().getCustomer().getName();
                    // w.setReceiver(w.getSender().getCustomer().getName());
                    }
                    System.out.println("custorder before");
                    List<Order> custOrder = w.getReceiver().getCustomer().getCustOrders();
                    System.out.println("custorder before"+custOrder);
                    String add = "";
                    for(Order o : custOrder)
                    {
                    if(o.getOrderId().equals(w.getOrder().getOrderId()))
                    add = o.getDeliveryadd();
                    }
                    //JOptionPane.showMessageDialog(null, "Address : " + add);
                    row[5] = add;
                    row[6] = w.getStatus();
                    dtm.addRow(row);


                }
  
            }
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        restaurantOrdersTable = new javax.swing.JTable();
        btnAcceptOrder = new javax.swing.JButton();
        btnDeclineOrder = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        restaurantOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Ordered Items", "Customer Name", "Message", "Sender", "Customer Address", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(restaurantOrdersTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 630, 125));

        btnAcceptOrder.setText("Accept Order");
        btnAcceptOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptOrderActionPerformed(evt);
            }
        });
        add(btnAcceptOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, -1, -1));

        btnDeclineOrder.setText("Decline Order");
        btnDeclineOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineOrderActionPerformed(evt);
            }
        });
        add(btnDeclineOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 230, -1, -1));

        btnAssign.setText("Assign to DeliveryMan");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 230, -1, -1));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ORDERS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptOrderActionPerformed
        // TODO add your handling code here:
        btnAssign.setEnabled(true);
        int selectedRow = restaurantOrdersTable.getSelectedRow();
        if(selectedRow >= 0)
        {
            String orderId= (String)restaurantOrdersTable.getValueAt(selectedRow, 0);
            for(WorkRequest wr: this.restaurant.getWorkQueue().getWorkRequestList())
            {
                if(wr.getOrder().getOrderId().equals(orderId))
                {
                  if(wr.getStatus().equalsIgnoreCase("Assinged to delivery Man"))
                   {
                        JOptionPane.showMessageDialog(null, "The order is already assigned for delivery");
                        break;
                   }
                  else if(wr.getStatus().equalsIgnoreCase("Decline"))
                  {
                      JOptionPane.showMessageDialog(null, "The order is already declined."); 
                      break;
                  }
                  else
                  {
                      if(wr.getStatus().equalsIgnoreCase("Accepted"))
                      {
                         JOptionPane.showMessageDialog(null, "The order is already accepted."); 
                        break; 
                      }
                      else
                      {
                          wr.setStatus("Accepted");
                          JOptionPane.showMessageDialog(null, "The order has been accepted.");
                          this.populateTable();
                          break;
                      }
                  }
                }
            }
        }
    }//GEN-LAST:event_btnAcceptOrderActionPerformed

    private void btnDeclineOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineOrderActionPerformed
        // TODO add your handling code here:
        btnAssign.setEnabled(false);
        int selectedRow = restaurantOrdersTable.getSelectedRow();
        if(selectedRow >= 0)
        {
           String orderId= (String)restaurantOrdersTable.getValueAt(selectedRow, 0);
            for(WorkRequest wr: this.restaurant.getWorkQueue().getWorkRequestList())
            {
                if(wr.getOrder().getOrderId().equals(orderId))
                {
                  wr.setStatus("Decline");
                  this.populateTable();
                  break;
                }
            }
        }
    }//GEN-LAST:event_btnDeclineOrderActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = restaurantOrdersTable.getSelectedRow();
        if(selectedRow >= 0)
        {
            String orderId= (String)restaurantOrdersTable.getValueAt(selectedRow, 0);
            for(WorkRequest wr: this.restaurant.getWorkQueue().getWorkRequestList())
            {
                if(wr.getOrder().getOrderId().equals(orderId))
                {
                    order = wr.getOrder();
                    break;
                }
            }
            AssignToDeliverymanJPanel assignPanel = new AssignToDeliverymanJPanel(userProcessContainer, order, this.deliveryManDirectory, this.restaurant, this.userAccount);
            userProcessContainer.add("assignPanel", assignPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select a order to assign to delivery man.");
        }
        
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AdminWorkAreaJPanel adminPanel = (AdminWorkAreaJPanel) component;
//        adminPanel.postEvent(e);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptOrder;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeclineOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable restaurantOrdersTable;
    // End of variables declaration//GEN-END:variables
}
